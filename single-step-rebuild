#!/bin/sh

set -euo pipefail

# This script is for applying a simultaneous change to the translation and runtime
#       (e.g. renaming something, changing some translation). Let's call the old "ABI"
#       (java API) ABI-A and the new one ABI-B. The silver in grammars/silver should be
#       updated to produce code using ABI-B, and the runtime in runtime/java should similarly
#       be ready to interop with that code.
#
# 1) Start with a working copy of silver and it's runtime (ABI-A) stored in JARS-BAK
# 2) (optionally) apply a patch to silver, the path of which is in $COMPATPATCH
#       to make the new ("child") version (which emits code using ABI-B) build with the
#       old ("parent") silver
# 3) Deep clean
# 4) Using old silver (ABI-A) build a ONE-JAR version of new silver (which is built
#       using ABI-A, but emits code that will use ABI-B)
# 5) (optionally) undo the patch
# 6) Clean out some generated and build silver:core and silver:xml:ast, which are circularly
#       required to rebuild the runtime. So now they are built using ABI-B. Ignore javac failure
# 7) Rebuild the runtime for ABI-B
# 8) Install the runtime
#
# After this, jars/silver.*.jar is broken. build/silver.*.jar is a self-contained version of new silver,
#       internally using ABI-A with it's bundled ABI-A runtime, but emitting code for ABI-B. 
#       jars/SilveRuntime.jar is for ABI-B. This means that build/silver.*.jar is ready to compile
#       code and emit java code using ABI-B dynamically (i.e. normally) linked to the ABI-B SilverRuntime.jar.
#       (So you should be good to run tests now etc.)
#       This has the side effect of breaking the old copy of the ABI-A silver (but you can restore it from
#       JARS-BAK.) If things work well, just promote your new ABI-B silver to jars/silver.*.jar and run self-compile
#       to complete the rebuild cycle, resulting in a silver using ABI-B internally and compiling to ABI-B.

: ${SVJVM_FLAGS="-Xmx16G -Xss128M"}
: ${COMPATPATCH=""}

function cleanup () {
	if [ -n "$COMPATPATCH" ]; then
		echo    === APPLY -R $COMPATPATCH ===
		git apply -R $COMPATPATCH
	fi
	rm build.xml ||true
}

trap "echo !!! FAILED !!!; cleanup" EXIT

echo    === RESTORE OLD JARS ===
cp JARS-BAK/*.jar jars/
if [ -n "$COMPATPATCH" ]; then
	echo    === APPLY $COMPATPATCH ===
	git apply $COMPATPATCH
fi
echo    === DEEP CLEAN ===
./deep-clean -delete all
echo    === COMPILE WITH OLD SILVER ===
mkdir -p build
(cd build; ../support/bin/silver --clean --one-jar silver:compiler:composed:Default)
cleanup
echo    === BUILD CHILDRUNTIME ===
rm -rf generated/*/silver/core generated/*/silver/xml ||true
(cd build; ../support/bin/silver-custom silver.compiler.composed.Default.jar silver:core ||true)
(cd build; ../support/bin/silver-custom silver.compiler.composed.Default.jar silver:xml:ast ||true)
echo    === BUILD JAVA RUNTIME ===
(cd runtime/java; ant)
echo    === INSTALL NEW RUNTIME ===
cp runtime/java/*.jar jars
echo    === DONE\? ===
trap - EXIT