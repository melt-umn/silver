#!/usr/bin/env bash

set -eu

# Usage: ./fetch-jars [rev-name] [--unstable] [--copper]
# If a revision is not specified, the script fetches the latest jars from the current branch,
# falling back to develop.
# If --unstable is specified, always fetch from commit artifacts on foundry.
# If --copper is specified, only fetch the Copper jars.

# Parse command line argumants.
# Hacky, but getopts seems like overkill for this...
rev_name=""
for arg in "$@"; do
  if [[ $arg != -* ]]; then
    rev_name=$arg
    break
  fi
done

COMMIT_ARTIFACTS="https://foundry.remexre.xyz/commit-artifacts/"

[[ $* == *--local* ]]
LOCAL_JARS=$?

function has_jars {
  if [[ $LOCAL_JARS -eq 0 ]]; then
    [[ -d "JARS-BAK/$1" ]]
  else
    wget --spider -q "$COMMIT_ARTIFACTS/$1"
  fi
}

rev=""

# Look for jars in the specified revision
if [[ -n $rev_name ]]; then
  rev=$(git rev-parse "$rev_name")
fi

# Get the hash of the latest commit on develop.
# This always gives the latest commit regardless of if the repo is up to date,
# and works in a Jenkins checkout.
DEVELOP=$(git ls-remote https://github.com/melt-umn/silver develop | cut -f1 | head -n1)

# Look for jars in the current commit and its parents.
# First, check that we are inside a git repo.
if [[ -z $rev ]] && git rev-parse --is-inside-work-tree 1> /dev/null 2> /dev/null; then
  # Walk the history in topological order, fully exploring each chain of commits
  # before newer commits from other merged chain.
  for commit in $(git rev-list --topo-order HEAD "^$DEVELOP"); do
    echo "Looking for jars from past commit $commit"
    if has_jars "$commit"; then
      echo "Found jars from past commit"
      rev=$commit
      break
    fi
  done
fi

if [[ -z $rev ]]; then
  echo "Failed to find jars for the specified revision or any of its ancestors."
  exit 1
fi

# Figure out how to obtain the jars from the revision we chose.
if [[ $* == *--local* ]]; then
  echo "Fetching local jars..."
  LOCAL_STORE="JARS-BAK/$rev"
  REMOTE_STORE=
  JARS_BAK=
elif [[ $* != *--unstable* && $* != *--local* && (-z $rev || $rev == "$DEVELOP") ]]; then
  echo "Fetching latest stable jars..."
  LOCAL_STORE=/web/research/melt.cs.umn.edu/downloads/silver-dev/jars
  REMOTE_STORE="https://melt.cs.umn.edu/downloads/silver-dev/jars"
  JARS_BAK=JARS-BAK
else
  git --no-pager show --quiet "$rev"
  if ! has_jars "$rev"; then
    echo "Cound not find jars for commit"
    exit 1
  fi
  echo "Warning: Fetching unstable jars!"
  LOCAL_STORE=
  REMOTE_STORE="$COMMIT_ARTIFACTS/$rev"
  JARS_BAK="JARS-BAK/$rev"
fi

if [[ $* == *--copper* ]]; then
  # Only fetch the Copper jars, if requested
  FILES="CopperCompiler.jar"
else
  FILES="CopperCompiler.jar commonmark-0.17.1.jar silver.compiler.composed.Default.jar SilverRuntime.jar"
fi


mkdir -p jars

if [[ -n "$LOCAL_STORE" && -d $LOCAL_STORE ]]; then
  # We have downloaded the jars before, just go copy them.
  for file in $FILES; do
      cp "$LOCAL_STORE/$file" jars/
  done
else
  # Download the jars.
  # There's probably a better way to do this!
  # Using -r causes lots of pointless downloads of variations of the index.html
  # even if -A.jar is used they still get downloaded...
  
  URLS=""
  for file in $FILES; do
    URLS="$URLS $REMOTE_STORE/$file"
  done
  
  # We're going to download them to here
  mkdir -p "$JARS_BAK"
  
  # -N Pay attention to timestamps, to avoid needless redownloads.
  # -P jars/  Put the files in jars/
  # -nv Don't be so verbose!
  wget -N -P "$JARS_BAK/" -nv $URLS
  
  # Always overwrite all the files in jars.
  for file in $FILES; do
      cp "$JARS_BAK/$file" jars/
  done
fi
