#!/usr/bin/env bash

set -eu

# Usage: ./fetch-jars [rev-name] [--copper]
# If a revision is not specified, the script fetches the latest jars from the current branch,
# falling back to develop.
# If --copper is specified, only fetch the Copper jars.

COMMIT_ARTIFACTS="https://foundry.remexre.xyz/commit-artifacts/"

function has_jars {
  wget --spider -q "$COMMIT_ARTIFACTS/$1"
}

rev=""

# Look for jars in the specified revision
if [[ $* != *--copper* && $# -gt 0 || $# -gt 1 ]]; then
  rev=$(git rev-parse $1)
fi

# Look for jars in the current commit and its parents
if [ -z $rev ]; then
  for commit in $(git rev-list HEAD ^develop); do
    if has_jars $commit; then
      echo "Found jars from past commit"
      rev=$commit
      break
    fi
  done
fi

git --no-pager show --quiet $rev
if ! has_jars $rev; then
  echo "Cound not find jars for commit"
  exit 1
fi

if [[ -z $rev || $rev == $(git rev-parse develop) ]]; then
  echo "Fetching latest stable jars..."
  LOCAL_STORE=/web/research/melt.cs.umn.edu/downloads/silver-dev/jars
  REMOTE_STORE="https://melt.cs.umn.edu/downloads/silver-dev/jars"
  JARS_BAK=JARS-BAK
else
  echo "Warning: Fetching unstable jars!"
  LOCAL_STORE=
  REMOTE_STORE="$COMMIT_ARTIFACTS/$rev"
  JARS_BAK="JARS-BAK/$rev"
fi

if [[ $* == *--copper* ]]; then
  # Only fetch the Copper jars, if requested
  FILES="CopperCompiler.jar"
else
  FILES="CopperCompiler.jar commonmark-0.17.1.jar silver.compiler.composed.Default.jar SilverRuntime.jar"
fi

mkdir -p jars

if [[ -n "$LOCAL_STORE" && -d $LOCAL_STORE ]]; then
  for file in $FILES; do
      cp $LOCAL_STORE/$file jars/
  done
else
  # There's probably a better way to do this!
  # Using -r causes lots of pointless downloads of variations of the index.html
  # even if -A.jar is used they still get downloaded...
  
  URLS=""
  for file in $FILES; do
    URLS="$URLS $REMOTE_STORE/$file"
  done
  
  # We're going to download them to here
  mkdir -p $JARS_BAK
  
  # -N Pay attention to timestamps, to avoid needless redownloads.
  # -P jars/  Put the files in jars/
  # -nv Don't be so verbose!
  wget -N -P $JARS_BAK/ -nv $URLS
  
  # Always overwrite all the files in jars.
  for file in $FILES; do
      cp $JARS_BAK/$file jars/
  done
fi

