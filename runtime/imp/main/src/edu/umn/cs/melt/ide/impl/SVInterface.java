package edu.umn.cs.melt.ide.impl;

import java.io.IOException;
import java.io.Reader;

import org.eclipse.core.resources.IProject;

import common.ConsCell;
import common.IOToken;
import common.Node;
import common.StringCatter;
import core.NIOVal;

import edu.umn.cs.melt.copper.runtime.logging.CopperParserException;
import edu.umn.cs.melt.ide.eclipse.property.IPropertyPageTab;
import edu.umn.cs.melt.ide.imp.services.IdeParseResult;
import edu.umn.cs.melt.ide.silver.property.ui.IPropertyControlsProvider;

/**
 * This interface is implemented by two classes:
 *   1. The SVDefault class next door.
 *   2. The implementation for a language plugin generated by silver. 
 *
 * This is pretty much nothing but a collection of function pointers to silver functions.
 * They should appear in the ide plugin declaration in the silver source file.
 */
public interface SVInterface {
	/**
	 * Gets the language name, i.e. that used in the IMP language registry.
	 * 
	 * @see org.eclipse.imp.language.Language
	 * @see org.eclipse.imp.language.LanguageRegistry
	 */
	public String name();
	
	/**
	 * Obtain this plugin's id.
	 * 
	 * Should *NOT* be used to guess the ids of extension point contibutions
	 * (e.g. pluginId() + ".nature" or similar) becuase that's crap.
	 * 
	 * SHOULD be used for trying to open up resources from inside this bundle's jar.
	 */
	public String pluginId();
	
	/**
	 * Gets the name of the problem marker for this extension.
	 */
	public String markerErrorName();
	
	/**
	 * Obtain the name of the nature for this plugin.
	 */
	public String getNatureId();
	
	/**
	 * Get the file extension associated with this plugin. excluding the dot. e.g. "sv"
	 */
	public String fileExtension();
	
	/**
	 * Obtains a list of properties to request in order to create a new file via wizard.
	 */
	public IPropertyControlsProvider getNewFileProperties();
	/**
	 * String ::= [IdeProperty]
	 * 
	 * Given the properties from {@link #getNewFileProperties()}, generate the file's contents.
	 * 
	 * @param properties  the requested properties
	 * @return the file's initial contents
	 */
	public StringCatter fileStub(ConsCell properties);

	/**
	 * Obtains a list of properties for the project's configuration.
	 */
	public IPropertyControlsProvider getProjectProperties();
	/**
	 * Generate the initial project properties configuration file contents.
	 */
	public String getInitialProjectProperties();
	/**
	 * Get a set of tabs for the project's properties page.
	 */
	public IPropertyPageTab[] getPropertyTabs();
}
